Abstract Class
An abstract class:

Can have implementations: It can define methods and properties with or without a body (partial implementation).
Supports inheritance: A class can inherit from only one abstract class.
Can have access modifiers: Members can be private, protected, internal, or public.
Allows constructors: Can have constructors and be used to initialize data for derived classes.
Can have fields: Allows fields, which can be used to store state.

using System;

public abstract class Animal {
    public string Name { get; }

    public Animal(string name) {
        Name = name;
    }

    public abstract void Speak(); // Abstract method

    public void Eat() {  // Concrete method
        Console.WriteLine($"{Name} is eating.");
    }
}

public class Dog : Animal {
    public Dog(string name) : base(name) {}

    public override void Speak() { // Override abstract method
        Console.WriteLine($"{Name} says: Woof!");
    }
}

class Program {
    static void Main() {
        Animal dog = new Dog("Buddy");
        dog.Speak(); // Outputs: Buddy says: Woof!
        dog.Eat();   // Outputs: Buddy is eating.
    }
}


Interface
An interface:

No implementation: Defines only method and property signatures (until C# 8.0, which allows default implementations).
Supports multiple inheritance: A class can implement multiple interfaces.
No access modifiers: All members are implicitly public.
Cannot have constructors or fields: Interfaces cannot initialize state or have non-method members.

using System;

public interface IAnimal {
    string Name { get; }
    void Speak(); // Signature only
}

public class Dog : IAnimal {
    public string Name { get; }

    public Dog(string name) {
        Name = name;
    }

    public void Speak() {
        Console.WriteLine($"{Name} says: Woof!");
    }
}

class Program {
    static void Main() {
        IAnimal dog = new Dog("Buddy");
        dog.Speak(); // Outputs: Buddy says: Woof!
    }
}
